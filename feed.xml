<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.5.2">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2020-12-21T08:38:17-08:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">The Little Calculist</title>
  

  
    <subtitle>Dave Herman's personal blog.</subtitle>
  

  
    <author>
        <name>David Herman</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Toolchains as Code</title>
      
      
      <link href="http://localhost:4000/blog/2020/12/21/tac/" rel="alternate" type="text/html" title="Toolchains as Code" />
      
      <published>2020-12-21T02:15:00-08:00</published>
      <updated>2020-12-21T02:15:00-08:00</updated>
      <id>http://localhost:4000/blog/2020/12/21/tac</id>
      <content type="html" xml:base="http://localhost:4000/blog/2020/12/21/tac/">&lt;p&gt;As &lt;a href=&quot;https://volta.sh&quot;&gt;Volta&lt;/a&gt; hits its 1.0 release, I’ve been thinking about what makes it more than just a Node version manager. I think what makes Volta so liberating is what I’ve been calling &lt;strong&gt;Toolchains as Code&lt;/strong&gt; (TaC):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The exact set of command-line tools used for a project should be in git, and should Just Work for everyone who contributes to the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specifying toolchains as code instead of manually installing and upgrading frees developers up from acting like their development machine’s sysadmin, and lets them focus their precious cognitive resources on what really matters: building software!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;declare-and-forget&quot;&gt;Declare and forget&lt;/h2&gt;

&lt;p&gt;Volta’s lead maintainer, &lt;a href=&quot;https://github.com/charlespierce&quot;&gt;Chuck Pierce&lt;/a&gt;, likes to say that his favorite compliment is when Volta users tell him they tend to &lt;a href=&quot;https://twitter.com/mitsuhiko/status/1332088775330054145&quot;&gt;forget it exists&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just like how &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot;&gt;Infrastructure as Code&lt;/a&gt; frees teams from manually managing their server infrastructure, Volta lets a team collectively maintain descriptions of their project’s required tools right in their git repo. On a day-to-day basis, developers just use the tools they’re familiar with—calling Node, npm, Yarn, and other CLI tools directly from the command-line or scripts, without ever even thinking about installing or upgrading.&lt;/p&gt;

&lt;h2 id=&quot;why-dont-you-just&quot;&gt;Why don’t you just…?&lt;/h2&gt;

&lt;p&gt;I’m not claiming Volta is the first or only TaC solution. In fact, it was inspired by other systems like &lt;a href=&quot;https://github.com/rust-lang/rustup&quot;&gt;rustup&lt;/a&gt; and &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt;. But sometimes people ask why we even need toolchain managers when you could just use containers or cool new cloud-based development environments like &lt;a href=&quot;https://github.com/features/codespaces&quot;&gt;Codespaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cloud development environments are the future, but I think they still end up wanting a TaC solution. For example, in a monorepo environment, it’s not always enough to have just one version of Node or other tools installed. It should be easy to move around from sub-project to sub-project without constantly having to install or modify the system tools.&lt;/p&gt;

&lt;h2 id=&quot;my-hope&quot;&gt;My hope&lt;/h2&gt;

&lt;p&gt;Just like Go set a new standard that languages should come with &lt;a href=&quot;https://blog.golang.org/gofmt&quot;&gt;their own auto-formatter&lt;/a&gt;, I think rustup planted a seed that programming platforms should also come with their own tool manager. My hope for JavaScript is that eventually Node will ship with a tool manager similar to or even based on Volta.&lt;/p&gt;

&lt;p&gt;Even better? Maybe some day all major programming platforms will treat TaC as table-stakes functionality, just like code formatting and package management.&lt;/p&gt;

&lt;h2 id=&quot;see-for-yourself&quot;&gt;See for yourself!&lt;/h2&gt;

&lt;p&gt;If you’ve never tried using a tool manager before, &lt;a href=&quot;https://volta.sh&quot;&gt;Volta 1.0&lt;/a&gt; is out today, so now’s a great time to try it for yourself!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Volta" />
      
        <category term="Dev Tools as Code" />
      

      

      
        <summary type="html">As Volta hits its 1.0 release, I’ve been thinking about what makes it more than just a Node version manager. I think what makes Volta so liberating is what I’ve been calling Toolchains as Code (TaC): The exact set of command-line tools used for a project should be in git, and should Just Work for everyone who contributes to the project. Specifying toolchains as code instead of manually installing and upgrading frees developers up from acting like their development machine’s sysadmin, and lets them focus their precious cognitive resources on what really matters: building software!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#Rust2018: A Neon Wish List</title>
      
      
      <link href="http://localhost:4000/blog/2018/01/14/rust-2018-a-neon-wish-list/" rel="alternate" type="text/html" title="#Rust2018: A Neon Wish List" />
      
      <published>2018-01-13T17:45:00-08:00</published>
      <updated>2018-01-13T17:45:00-08:00</updated>
      <id>http://localhost:4000/blog/2018/01/14/rust-2018-a-neon-wish-list</id>
      <content type="html" xml:base="http://localhost:4000/blog/2018/01/14/rust-2018-a-neon-wish-list/">&lt;p&gt;While I’ve been thoroughly enjoying the Rust community’s spirited &lt;a href=&quot;https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html&quot;&gt;#Rust2018 blog-fest&lt;/a&gt;, I wasn’t really thinking of participating myself until &lt;a href=&quot;http://jvns.ca&quot;&gt;Julia Evans&lt;/a&gt; pointed out &lt;a href=&quot;https://twitter.com/b0rk/status/952370352759418880&quot;&gt;the leadership wants to hear from everyone&lt;/a&gt;—even if I might not have anything especially new to add. So here’s my little wish list for Rust in 2018.&lt;/p&gt;

&lt;p&gt;Since I’m not in Rust’s leadership, I don’t have to worry about synthesizing some grand narrative for the whole of Rust. So I’ll just focus on a few things that would be personally useful to me. In particular, I’ll stick to topics that would be helpful for my &lt;a href=&quot;https://www.neon-bindings.com&quot;&gt;Neon&lt;/a&gt; project, a set of bindings for writing native Node extension modules in Rust.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;stabilize-impl-trait&quot;&gt;Stabilize &lt;code class=&quot;highlighter-rouge&quot;&gt;impl trait&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;The most challenging part of keeping Neon’s design manageable is the annotation burden. Neon provides a safe API for managing handles into Node’s JavaScript garbage collector, and to do this, it requires passing around a “handle scope” parameter everywhere, which tracks the lifetimes of handles. There are a few flavors of handle scopes, which means helper functions in Neon projects often end up with some pretty hairy signatures:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_foo_bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// extract the `obj.foo` property and check that it's an object&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// extract the `obj.foo.bar` property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I would love for Neon users to be able to combine lifetime elision and the &lt;a href=&quot;https://github.com/rust-lang/rust/issues/34511&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;impl trait&lt;/code&gt;&lt;/a&gt; shorthand syntax to write something like:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_foo_bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(With an upcoming &lt;a href=&quot;https://github.com/dherman/rfcs-1/blob/vm-two-point-oh/text/vm-2.0.md&quot;&gt;cleanup of the core Neon API&lt;/a&gt;, the details of this would change a bit, but &lt;code class=&quot;highlighter-rouge&quot;&gt;impl trait&lt;/code&gt; would be just as appealing.)&lt;/p&gt;

&lt;h1 id=&quot;syntactic-abstraction-for-error-propagation&quot;&gt;Syntactic abstraction for error propagation&lt;/h1&gt;

&lt;p&gt;I adore the &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; syntax, but it’s not enough! Expressions like &lt;code class=&quot;highlighter-rouge&quot;&gt;Ok(bar)&lt;/code&gt; in the above example are an indication that we don’t have a complete abstraction layer in the syntax for error propagation. I find it particularly galling when I have to see &lt;code class=&quot;highlighter-rouge&quot;&gt;Ok(())&lt;/code&gt;. It’s dipping down into an unnecessary abstraction layer, distracting the core logic of the function with mechanical details of the representation of Rust’s control flow protocols.&lt;/p&gt;

&lt;p&gt;I’m excited about the discussions around &lt;a href=&quot;https://internals.rust-lang.org/t/pre-rfc-catching-functions/6505&quot;&gt;“catching functions”&lt;/a&gt;. I think we can get to a sweet spot where we have an abstraction layer in the syntax that never exposes the &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&lt;/code&gt; type for error handling, while still explicitly annotating every point that may throw (thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; syntax, and by contrast to exceptions). The above examples might look something like:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_foo_bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsException&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;make-cargo-more-extensible&quot;&gt;Make cargo more extensible&lt;/h1&gt;

&lt;p&gt;Like &lt;code class=&quot;highlighter-rouge&quot;&gt;xargo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wargo&lt;/code&gt;, Neon comes with a command-line tool that wraps cargo’s behavior in order to abstract away a bunch of build configuration details. I’m proud of this abstraction, because it makes building native modules in Node far easier than they are with C++. But I would much rather Neon programmers could use cargo directly, calling all their usual familiar commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo build&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To support this, Neon will need a handful of extension points that don’t exist today:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ability to extend the memoization logic with extra environmental information (e.g. which version of Node is being built for and the values of some Node-specific environment variables).&lt;/li&gt;
  &lt;li&gt;Post-build hooks, so I can generate the final DLL and put it in the right directory.&lt;/li&gt;
  &lt;li&gt;The ability to add default build flags (for example, on macOS, &lt;code class=&quot;highlighter-rouge&quot;&gt;neon build&lt;/code&gt; actually calls &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo rustc&lt;/code&gt; with some extra low-level linking flags).&lt;/li&gt;
  &lt;li&gt;Project templates for &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo new&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being able to write&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cargo new --template&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;neon my-first-neon-project
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-first-neon-project
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;would be so amazing.&lt;/p&gt;

&lt;h1 id=&quot;neon-is-about-welcoming-js-programmers&quot;&gt;Neon is about welcoming JS programmers&lt;/h1&gt;

&lt;p&gt;I promised no narrative, but there is a common thread here. I started the Neon project because I thought it would make a great bridge between the JavaScript and Rust communities. All of the topics in this post are about facilitating that connection:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Neon forces JS programmers to get more explicit about working with the garbage collector than they normally have to, so making that as lightweight as possible makes falling into native code less of a steep cliff.&lt;/li&gt;
  &lt;li&gt;JS is a language with exceptions, so making the protocol for emulating exceptions in Rust as ergonomic as possible will make Rust a better environment for JS programmers.&lt;/li&gt;
  &lt;li&gt;And just as Node projects have a workflow oriented around &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;, giving Neon projects a standard &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo&lt;/code&gt;-based workflow will feel familiar and pleasant to Node programmers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My dream is that Neon can serve as a gateway welcoming JS programmers into Rust and systems programming for years to come. The more we smoothe the path between them, the more people we invite into our community.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Rust" />
      
        <category term="Neon" />
      

      

      
        <summary type="html">While I’ve been thoroughly enjoying the Rust community’s spirited #Rust2018 blog-fest, I wasn’t really thinking of participating myself until Julia Evans pointed out the leadership wants to hear from everyone—even if I might not have anything especially new to add. So here’s my little wish list for Rust in 2018. Since I’m not in Rust’s leadership, I don’t have to worry about synthesizing some grand narrative for the whole of Rust. So I’ll just focus on a few things that would be personally useful to me. In particular, I’ll stick to topics that would be helpful for my Neon project, a set of bindings for writing native Node extension modules in Rust.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Neon Wants Your Help!</title>
      
      
      <link href="http://localhost:4000/blog/2017/09/25/neon-wants-your-help/" rel="alternate" type="text/html" title="Neon Wants Your Help!" />
      
      <published>2017-09-25T03:49:00-07:00</published>
      <updated>2017-09-25T03:49:00-07:00</updated>
      <id>http://localhost:4000/blog/2017/09/25/neon-wants-your-help</id>
      <content type="html" xml:base="http://localhost:4000/blog/2017/09/25/neon-wants-your-help/">&lt;p&gt;My history with Rust goes back a long way. But it was when I really started to understand its &lt;a href=&quot;https://www.youtube.com/watch?v=ySW6Yk_DerY&quot;&gt;enabling potential&lt;/a&gt;, its capacity to empower whole groups of people to do things they couldn’t do before, that I just had to find a more direct way to get involved with making that promise a reality.&lt;/p&gt;

&lt;p&gt;I decided that the best way I could help widen the on-ramp to Rust was to create &lt;a href=&quot;https://www.neon-bindings.com&quot;&gt;Neon&lt;/a&gt;: a library for conveniently implementing native Node.js modules with Rust instead of C/C++. With Neon, JavaScript programmers can get access to all the power that Rust offers: high-performance native code, convenient multithreading, freedom from memory faults and data races, and access to native libraries and the &lt;a href=&quot;https://crates.io&quot;&gt;Cargo&lt;/a&gt; ecosystem. And they can do this without throwing away their working apps or existing expertise. In short, my goal with Neon is to make it easy for JavaScript programmers to “dip their toe” into Rust without diving straight into the deep end.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;right&quot; style=&quot;width: 200px; height: 150px;&quot; src=&quot;/assets/help-wanted.jpg&quot; /&gt; We’ve made some great progress recently, with some cool new features including &lt;a href=&quot;https://guides.neon-bindings.com/electron-apps/&quot;&gt;Electron support&lt;/a&gt; and a new &lt;a href=&quot;https://api.neon-bindings.com/neon/task/&quot;&gt;Task API&lt;/a&gt; for asynchronously spawning Rust computations to run in a background thread. &lt;strong&gt;But Neon is still a young project, and could use your help to take it to the next level!&lt;/strong&gt; Neon is still primarily built by me and a small set of contributors, so &lt;strong&gt;I’m looking for contributors with a wide range of skills and interests&lt;/strong&gt; who can join us to take Neon to the next level and eventually &lt;strong&gt;grow into a project leadership team.&lt;/strong&gt; I think we’re onto something exciting here: a chance to build bridges between the JavaScript and Rust worlds and to create opportunities for aspiring new systems programmers. And I hope you’ll consider being a part of it!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;and-i-mean-a-wide-range&quot;&gt;…And I Mean a Wide Range&lt;/h2&gt;

&lt;p&gt;My dream is to make Neon:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Easy to learn:&lt;/strong&gt; The default abstraction layer should be intuitive enough that a newcomer’s first experience coming from JavaScript should be approachable, and there should be documentation and learning materials to smoothe the on-boarding experience.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rock-solid:&lt;/strong&gt; Users should feel confident that refactoring their code in Rust should be no more likely to crash their Node server than vanilla JavaScript.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fully-featured:&lt;/strong&gt; The Neon API should be able to express everything you could do in JavaScript itself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stable:&lt;/strong&gt; Once we start approaching 1.0, Neon should get on a regular release cycle, with strong commitment to semantic versioning and backwards compatibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to give you a sense of the many varied kinds of contributions we could use, here’s a taste:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project management.&lt;/strong&gt; We should keep on top of issues and PRs. I would love to set up a regular meeting with anyone who’s willing to help out with this! I could also use help setting up a simple RFC process similar to &lt;a href=&quot;https://github.com/rust-lang/rfcs&quot;&gt;Rust RFCs&lt;/a&gt;, especially for having community discussions around API and workflow design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical writing.&lt;/strong&gt; The &lt;a href=&quot;https://github.com/neon-bindings/guides&quot;&gt;guides&lt;/a&gt; are shaping up, but they’re incomplete and one of the most important tools for on-boarding new users. The &lt;a href=&quot;https://api.neon-bindings.com&quot;&gt;API docs&lt;/a&gt; are pretty rudimentary and would benefit from many more examples—we should strive for a high-quality, illustrative example for every single API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing.&lt;/strong&gt; The &lt;a href=&quot;https://github.com/neon-bindings/neon/tree/master/test&quot;&gt;test suite&lt;/a&gt; has a decent structure but is not at all complete. We should aim for complete test coverage of the API!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teaching.&lt;/strong&gt; I would love to get some good thinking into how to teach Neon to various audiences, especially people who are new to Rust and systems programming. We could use this to drive the way we structure the guides, tutorial videos, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows development.&lt;/strong&gt; My primary development machine is Windows these days, but I’m not an expert. I recently &lt;a href=&quot;https://github.com/neon-bindings/neon/issues/248&quot;&gt;broke our Appveyor builds&lt;/a&gt; just to prove it! 😝 We’ve also seen some intermittent hangs in Appveyor builds and I’d love a Windows expert to &lt;a href=&quot;https://github.com/neon-bindings/neon/issues/250&quot;&gt;do some investigating&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web development.&lt;/strong&gt; The Neon web site is currently a static page. It certainly would be fun to set it up as a Node page using Neon itself! One of the nice dynamic things we could do would be to create a roadmap page like &lt;a href=&quot;http://usehelix.com/roadmap&quot;&gt;the one Helix has&lt;/a&gt;, with automatic tracking of milestone progress using GitHub APIs. We should also set up a Neon project blog with Jekyll and style it consistently with the rest of &lt;a href=&quot;https://www.neon-bindings.com&quot;&gt;neon-bindings.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ops and automation.&lt;/strong&gt; I’ve started an &lt;a href=&quot;https://github.com/neon-bindings/neon/issues?q=is%3Aissue+is%3Aopen+label%3Aautomation&quot;&gt;automation label&lt;/a&gt; in the issues. A fantastic contribution would be an automated &lt;a href=&quot;https://github.com/neon-bindings/neon/issues/42&quot;&gt;publication script&lt;/a&gt; to make releases one-touch. (This is realistically achievable now thanks to some project reorganization.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node plugins.&lt;/strong&gt; We should explore the possibility of supporting using the new &lt;a href=&quot;https://nodejs.org/api/n-api.html&quot;&gt;N-API&lt;/a&gt; as an alternative backend for the implementation. We wouldn’t be able to move to this as the default backend right away, but it could pave the way for supporting &lt;a href=&quot;https://github.com/nodejs/node-chakracore&quot;&gt;Node on ChakraCore&lt;/a&gt;, and eventually might replace the current backend entirely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API design.&lt;/strong&gt; There are lots of things you can do in JavaScript that you still can’t do in Neon, so there’s plenty of missing APIs to finish. And it’s not too late to make incompatible changes to the API that’s there currently. For example, I’d be especially interested in ideas about making the &lt;a href=&quot;https://api.neon-bindings.com/neon/scope/trait.scope&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scope&lt;/code&gt;&lt;/a&gt; API less awkward, if possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cargo extensions.&lt;/strong&gt; So far, the &lt;a href=&quot;https://www.npmjs.com/package/neon-cli&quot;&gt;neon-cli&lt;/a&gt; workflow has been reasonably successful at abstracting away the painful configuration details required to build native Node modules correctly. But the &lt;em&gt;ideal&lt;/em&gt; situation would be to allow programmers to just use &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo build&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo run&lt;/code&gt;, and the like to build their Neon crates like any other Rust project. The recent discussions around &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2136&quot;&gt;making Cargo extensible&lt;/a&gt; open up some exciting possibilities to push in this direction. One of the ways you can indirectly help with Neon is to help that effort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Macrology.&lt;/strong&gt; One of the big, exciting projects we have left is to flesh out the &lt;a href=&quot;/blog/2016/04/01/native-js-classes-in-neon/&quot;&gt;high-level macro for defining JavaScript classes&lt;/a&gt; (and another for defining standalone functions) so users can use simple type annotations to automate conversions between JavaScript and Rust types. We should take inspiration from the design of our sibling project, &lt;a href=&quot;http://usehelix.com&quot;&gt;Helix&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Systems programming.&lt;/strong&gt; One of the biggest challenges we have to tackle is making the process of shipping Neon libraries practical, especially for shipping prebuilt binaries. One technique we can explore is to create an ABI-stable middle layer so that Neon binaries don’t need to be rebuilt for different versions of Node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Threading architectures.&lt;/strong&gt; Currently, Neon supports a couple of forms of threading: pausing the JavaScript VM to synchronously run a parallelized Rust computation (via the &lt;a href=&quot;https://api.neon-bindings.com/neon/vm/trait.lock&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lock&lt;/code&gt;&lt;/a&gt; API), and running a background &lt;a href=&quot;https://api.neon-bindings.com/neon/task/trait.task&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/a&gt; as part of the &lt;a href=&quot;http://docs.libuv.org/en/v1.x/threadpool.html&quot;&gt;libuv thread pool&lt;/a&gt;. There’s more we can do both on the computation side (for example, supporting &lt;a href=&quot;https://github.com/neon-bindings/neon/issues/228&quot;&gt;attaching to different threads than libuv’s pool&lt;/a&gt;) and the data side (for example, supporting &lt;a href=&quot;https://v8docs.nodesource.com/node-8.0/d5/d6e/classv8_1_1_array_buffer.html#a9291f6ac203b9ceae83f7f17d39ecb59&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt; transfer&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;getting-involved&quot;&gt;Getting Involved&lt;/h2&gt;

&lt;p&gt;Does any of these sound like something you’d be interested in? Or maybe you have other ideas! If you want to help, come talk to me (&lt;strong&gt;@dherman&lt;/strong&gt;) in the &lt;a href=&quot;https://rust-bindings.slack.com/messages/neon&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#neon&lt;/code&gt; community Slack channel&lt;/a&gt; (make sure to get an &lt;a href=&quot;https://rust-bindings-slackin.herokuapp.com/&quot;&gt;automatic invite&lt;/a&gt; first).&lt;/p&gt;

&lt;h2 id=&quot;-a-note-about-community&quot;&gt;&lt;img class=&quot;right&quot; style=&quot;width: 184px; height: 128px;&quot; src=&quot;/assets/come-in.png&quot; /&gt; A Note About Community&lt;/h2&gt;

&lt;p&gt;As the original creator of this project, I’m responsible not only for the software but for the community I foster. I &lt;em&gt;deeply love&lt;/em&gt; this part of open source, and I don’t take the responsibility lightly.&lt;/p&gt;

&lt;p&gt;Neon has a ton of cool tech inside of it, and if that’s the only aspect you’re interested in, that’s totally OK. Not everyone needs to be passionate about community-building. Still, not unlike Rust, this whole project’s purpose is to &lt;strong&gt;widen the circle of tech and empower new systems programmers.&lt;/strong&gt; So I ask of everyone who participates in the Neon project to strive to act in ways that will encourage and motivate as many people as possible to participate.&lt;/p&gt;

&lt;p&gt;Concretely, Neon uses the &lt;a href=&quot;https://www.contributor-covenant.org/&quot;&gt;Contributor Covenant&lt;/a&gt; to frame the expectations and standards of how we treat people in our community. Behind the policies is a simple goal: to &lt;strong&gt;make our community a place that welcomes, trusts, supports, and empowers one another.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If that sounds good to you, wanna come join us?&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Rust" />
      
        <category term="Node" />
      
        <category term="Neon" />
      
        <category term="Contributors" />
      

      

      
        <summary type="html">My history with Rust goes back a long way. But it was when I really started to understand its enabling potential, its capacity to empower whole groups of people to do things they couldn’t do before, that I just had to find a more direct way to get involved with making that promise a reality. I decided that the best way I could help widen the on-ramp to Rust was to create Neon: a library for conveniently implementing native Node.js modules with Rust instead of C/C++. With Neon, JavaScript programmers can get access to all the power that Rust offers: high-performance native code, convenient multithreading, freedom from memory faults and data races, and access to native libraries and the Cargo ecosystem. And they can do this without throwing away their working apps or existing expertise. In short, my goal with Neon is to make it easy for JavaScript programmers to “dip their toe” into Rust without diving straight into the deep end. We’ve made some great progress recently, with some cool new features including Electron support and a new Task API for asynchronously spawning Rust computations to run in a background thread. But Neon is still a young project, and could use your help to take it to the next level! Neon is still primarily built by me and a small set of contributors, so I’m looking for contributors with a wide range of skills and interests who can join us to take Neon to the next level and eventually grow into a project leadership team. I think we’re onto something exciting here: a chance to build bridges between the JavaScript and Rust worlds and to create opportunities for aspiring new systems programmers. And I hope you’ll consider being a part of it!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Native JS Classes in Neon</title>
      
      
      <link href="http://localhost:4000/blog/2016/04/01/native-js-classes-in-neon/" rel="alternate" type="text/html" title="Native JS Classes in Neon" />
      
      <published>2016-04-01T08:47:09-07:00</published>
      <updated>2016-04-01T08:47:09-07:00</updated>
      <id>http://localhost:4000/blog/2016/04/01/native-js-classes-in-neon</id>
      <content type="html" xml:base="http://localhost:4000/blog/2016/04/01/native-js-classes-in-neon/">&lt;p&gt;Last weekend I &lt;a href=&quot;https://github.com/rustbridge/neon/pull/58&quot;&gt;landed a PR&lt;/a&gt; that adds support for defining custom native classes in &lt;a href=&quot;/blog/2015/12/23/neon-node-rust/&quot;&gt;Neon&lt;/a&gt;. This means you can create JavaScript objects that internally wrap—and &lt;a href=&quot;https://doc.rust-lang.org/book/ownership.html&quot;&gt;own&lt;/a&gt;—a Rust data structure, along with methods that can safely access the internal Rust data.&lt;/p&gt;

&lt;p&gt;As a quick demonstration, suppose you have an &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; struct defined in Rust:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// etc ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;You can expose this to JS with the new &lt;code class=&quot;highlighter-rouge&quot;&gt;declare_types!&lt;/code&gt; macro:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;declare_types!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// JS class wrapping Employee records.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsEmployee&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.arguments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.arguments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// etc ...&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// etc ...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.arguments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.name&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;JsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new_or_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;..&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.upcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This defines a custom JS class whose instances contain an &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; record. It binds &lt;code class=&quot;highlighter-rouge&quot;&gt;JsEmployee&lt;/code&gt; to a Rust type that can create the class at runtime (i.e., the constructor function and prototype object). The &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; function defines the behavior for allocating the internals during construction of a new instance. The &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; method shows an example of how you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;vm::lock&lt;/code&gt; to borrow a reference to the internal Rust data of an instance.&lt;/p&gt;

&lt;p&gt;From there, you can extract the constructor function and expose it to JS, for example by exporting it from a native module:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;register_module!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;JsEmployee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;// get the class&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// get the constructor&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.exports&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Employee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;// export the constructor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you can use instances of this type in JS just like any other object:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lumbergh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bill Lumbergh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lumbergh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Bill Lumbergh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since the methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; expect &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; to have the right binary layout, they check to make sure that they aren’t being called on an inappropriate object type. This means you can’t segfault Node by doing something like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This safely throws a TypeError exception just like methods from other native classes like &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; do.&lt;/p&gt;

&lt;p&gt;Anyway, that’s a little taste of user-defined native classes. More docs work to do!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Rust" />
      
        <category term="Node" />
      
        <category term="Neon" />
      
        <category term="Classes" />
      

      

      
        <summary type="html">Last weekend I landed a PR that adds support for defining custom native classes in Neon. This means you can create JavaScript objects that internally wrap—and own—a Rust data structure, along with methods that can safely access the internal Rust data. As a quick demonstration, suppose you have an Employee struct defined in Rust: pub struct Employee { id: i32, name: String, // etc ... }</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Neon: Node + Rust = 💖</title>
      
      
      <link href="http://localhost:4000/blog/2015/12/23/neon-node-rust/" rel="alternate" type="text/html" title="Neon: Node + Rust = 💖" />
      
      <published>2015-12-23T07:30:00-08:00</published>
      <updated>2015-12-23T07:30:00-08:00</updated>
      <id>http://localhost:4000/blog/2015/12/23/neon-node-rust</id>
      <content type="html" xml:base="http://localhost:4000/blog/2015/12/23/neon-node-rust/">&lt;p&gt;If you’re a JavaScript programmer who’s been intrigued by Rust’s &lt;a href=&quot;http://blog.rust-lang.org/2015/08/14/Next-year.html&quot;&gt;&lt;em&gt;hack without fear&lt;/em&gt;&lt;/a&gt; theme—making systems programming safe and fun—but you’ve been waiting for inspiration, I may have something for you! I’ve been working on &lt;a href=&quot;https://github.com/dherman/neon&quot;&gt;Neon&lt;/a&gt;, a set of APIs and tools for &lt;strong&gt;making it super easy to write native Node modules in Rust&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dherman/neon&quot;&gt;Neon&lt;/a&gt; is an API for writing fast, crash-free native Node modules in Rust;&lt;/li&gt;
  &lt;li&gt;Neon enables Rust’s parallelism with guaranteed thread safety;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dherman/neon-cli&quot;&gt;Neon-cli&lt;/a&gt; makes it easy to create a Neon project and get started; and finally…&lt;/li&gt;
  &lt;li&gt;Help wanted!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-can-rust-and-so-can-you&quot;&gt;I Can Rust and So Can You!&lt;/h2&gt;

&lt;p&gt;I wanted to make it as easy as possible to get up and running, so I built &lt;a href=&quot;https://github.com/dherman/neon-cli&quot;&gt;neon-cli&lt;/a&gt;, a command-line tool that lets you generate a complete Neon project skeleton with one simple command and build your entire project with nothing more than the usual &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to try building your first native module with Neon, &lt;strong&gt;it’s super easy&lt;/strong&gt;: install &lt;a href=&quot;https://github.com/dherman/neon-cli&quot;&gt;neon-cli&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g neon-cli&lt;/code&gt;, then create, build, and run your new project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% neon new hello
...follow prompts...
% cd hello
% npm install
% node -e 'require(&quot;./&quot;)'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you don’t believe me, I made a &lt;a href=&quot;https://raw.githubusercontent.com/dherman/neon-cli/master/screencast.gif&quot;&gt;screencast&lt;/a&gt;, so you &lt;em&gt;know&lt;/em&gt; I’m legit.&lt;/p&gt;

&lt;h2 id=&quot;i-take-thee-at-thy-word&quot;&gt;I Take Thee at thy Word&lt;/h2&gt;

&lt;p&gt;To illustrate what you can do with Neon, I created a little &lt;a href=&quot;https://github.com/dherman/wc-demo&quot;&gt;word counting demo&lt;/a&gt;. The demo is simple: read in the complete plays of Shakespeare and count the total number of occurrences of the word “thee”. First I tried implementing it in pure JS. The top-level code splits the corpus into lines, and sums up the counts for each line:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wcLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Searching an individual line involves splitting the line up into word and matching each word against the search string:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wcLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The rest of the details are pretty straightforward but definitely &lt;a href=&quot;https://github.com/dherman/wc-demo/blob/master/lib/search.js&quot;&gt;check out the code&lt;/a&gt;—it’s small and self-contained.&lt;/p&gt;

&lt;p&gt;On my laptop, running the algorithm across all the plays of Shakespeare usually takes about 280 – 290ms. Not hugely expensive, but slow enough to be optimizable.&lt;/p&gt;

&lt;h2 id=&quot;fall-into-our-rustic-revelry&quot;&gt;Fall Into our Rustic Revelry&lt;/h2&gt;

&lt;p&gt;One of the amazing things about Rust is that highly efficient code can still be remarkably compact and readable. In the &lt;a href=&quot;https://github.com/dherman/wc-demo/blob/master/src/lib.rs&quot;&gt;Rust version of the algorithm&lt;/a&gt;, the code for summing up the counts for all the lines looks pretty similar to the JS code:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// in Rust you can omit `return` for a trailing expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In fact, that same code can be written at a higher level of abstraction &lt;em&gt;without losing performance&lt;/em&gt;, using iteration methods like &lt;a href=&quot;http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;&lt;/a&gt; (similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.reduce&lt;/code&gt;&lt;/a&gt; in JS):&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my quick experiments, that even seems to shave a few milliseconds off the total running time. I think this is a nice demonstration of the power of Rust’s &lt;a href=&quot;http://blog.rust-lang.org/2015/05/11/traits.html&quot;&gt;zero-cost abstractions&lt;/a&gt;, where idiomatic and high-level abstractions produce the same or sometimes even better performance (by making additional optimizations possible, like eliminating bounds checks) than lower-level, more obscure code.&lt;/p&gt;

&lt;p&gt;On my machine, the simple Rust translation runs in about 80 – 85ms. Not bad—about 3x as fast just from using Rust, and in roughly the same number of lines of code (60 in JS, 70 in Rust). BTW, I’m being approximate here with the numbers, because this isn’t a remotely scientific benchmark. My goal is just to demonstrate that you &lt;em&gt;can&lt;/em&gt; get significant performance improvements from using Rust; in any given situation, the particular details will of course matter.&lt;/p&gt;

&lt;h2 id=&quot;their-thread-of-life-is-spun&quot;&gt;Their Thread of Life is Spun&lt;/h2&gt;

&lt;p&gt;We’re not done yet, though! Rust enables something even cooler for Node: we can easily and safely parallelize this code—and I mean &lt;a href=&quot;http://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html&quot;&gt;without the night-sweats and palpitations usually associated with multithreading&lt;/a&gt;. Here’s a quick look at the top level logic in the Rust implementation of the demo:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wc_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;.fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;vm::lock&lt;/code&gt; API lets Neon safely expose the raw bytes of a Node &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; object (i.e., a typed array) to Rust threads, by preventing JS from running in the meantime. And Rust’s concurrency model makes programming with threads &lt;em&gt;actually fun&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate how easy this can be, I used &lt;a href=&quot;http://smallcultfollowing.com/babysteps/blog/2015/12/18/rayon-data-parallelism-in-rust/&quot;&gt;Niko Matsakis’s new Rayon crate&lt;/a&gt; of beautiful data parallelism abstractions. Changing the demo to use Rayon is as simple as replacing the &lt;code class=&quot;highlighter-rouge&quot;&gt;into_iter&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;/ lines above with:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_par_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wc_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind, Rayon wasn’t designed with Neon in mind—its generic primitives match the iteration protocols of Rust, so Neon was able to just pull it off the shelf.&lt;/p&gt;

&lt;p&gt;With that simple change, on my two-core MacBook Air, the demo goes from about 85ms down to about 50ms.&lt;/p&gt;

&lt;h2 id=&quot;bridge-most-valiantly-with-excellent-discipline&quot;&gt;Bridge Most Valiantly, with Excellent Discipline&lt;/h2&gt;

&lt;p&gt;I’ve worked on making the integration as seamless as possible. From the Rust side, Neon functions follow a simple protocol, taking a &lt;code class=&quot;highlighter-rouge&quot;&gt;Call&lt;/code&gt; object and returning a JavaScript value:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; object safely tracks handles into V8’s garbage-collected heap. The Neon API uses the Rust type system to guarantee that your native module can’t crash your app by mismanaging object handles.&lt;/p&gt;

&lt;p&gt;From the JS side, loading the native module is straightforward:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myNeonModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'neon-bridge'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;wherefores-this-noise&quot;&gt;Wherefore’s this Noise?&lt;/h2&gt;

&lt;p&gt;Hopefully this demo is enough to get people interested. Beyond the sheer fun of it, I think the strongest reasons for using Rust in Node are performance and parallelism. As the Rust ecosystem grows, it’ll also be a way to give Node access to cool Rust libraries. Beyond that, I’m hoping that Neon can make a nice abstraction layer that just makes writing native Node modules less painful. With projects like &lt;a href=&quot;https://blogs.windows.com/buildingapps/2015/05/12/bringing-node-js-to-windows-10-iot-core/&quot;&gt;node-uwp&lt;/a&gt; it might even be worth exploring evolving Neon towards a JS-engine-agnostic abstraction layer.&lt;/p&gt;

&lt;p&gt;There are lots of possibilities, but &lt;a href=&quot;https://github.com/dherman/neon&quot;&gt;I need help!&lt;/a&gt; If you want to get involved, I’ve created a &lt;a href=&quot;http://rustbridge.slack.com&quot;&gt;community slack&lt;/a&gt; (grab an invite from &lt;a href=&quot;http://rustbridge-community-slackin.herokuapp.com&quot;&gt;the Slackin app&lt;/a&gt;) and a &lt;code class=&quot;highlighter-rouge&quot;&gt;#neon&lt;/code&gt; IRC channel on &lt;a href=&quot;https://wiki.mozilla.org/IRC&quot;&gt;Mozilla IRC&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;irc.mozilla.org&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;a-quick-thanks&quot;&gt;A Quick Thanks&lt;/h2&gt;

&lt;p&gt;There’s a ton of fun exploration and work left to do but I couldn’t have gotten this far without huge amounts of help already: &lt;a href=&quot;http://oppenlander.me/articles/rust-ffi&quot;&gt;Andrew Oppenlander’s blog post&lt;/a&gt; got me off the ground, Ben Noordhuis and Marcin Cieślak helped me wrestle with V8’s tooling, I picked up a few tricks from Nathan Rajlich’s &lt;a href=&quot;https://github.com/TooTallNate/node-bindings/blob/master/bindings.js&quot;&gt;evil genius code&lt;/a&gt;, Adam Klein and Fedor Indutny helped me understand the V8 API, Alex Crichton helped me with compiler and linker arcana, Niko Matsakis helped me with designing the safe memory management API, and Yehuda Katz helped me with the overall design.&lt;/p&gt;

&lt;p&gt;You know what this means? &lt;a href=&quot;https://github.com/dherman/neon&quot;&gt;&lt;strong&gt;Maybe you can help too!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Rust" />
      
        <category term="Node" />
      
        <category term="Neon" />
      

      

      
        <summary type="html">If you’re a JavaScript programmer who’s been intrigued by Rust’s hack without fear theme—making systems programming safe and fun—but you’ve been waiting for inspiration, I may have something for you! I’ve been working on Neon, a set of APIs and tools for making it super easy to write native Node modules in Rust.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Why Mozlandia Was So Effective</title>
      
      
      <link href="http://localhost:4000/blog/2014/12/08/mozlandia/" rel="alternate" type="text/html" title="Why Mozlandia Was So Effective" />
      
      <published>2014-12-08T07:35:00-08:00</published>
      <updated>2014-12-08T07:35:00-08:00</updated>
      <id>http://localhost:4000/blog/2014/12/08/mozlandia</id>
      <content type="html" xml:base="http://localhost:4000/blog/2014/12/08/mozlandia/">&lt;p&gt;&lt;img class=&quot;right&quot; style=&quot;width: 225px; height: 226px;&quot; src=&quot;/assets/mozlanyardia.jpg&quot; /&gt; When Chris Beard first announced that over a thousand Mozilla staff and contributors would be descending on Portland this month for an &lt;a href=&quot;https://twitter.com/search?q=%23mozlandia&quot;&gt;all-hands work week&lt;/a&gt;, I worried about two things. I knew a couple of the groups in my department would be approaching deadlines. And I was afraid that so many groups of people in one place would be chaotic and hard to coordinate. I wasn’t even wrong – but it didn’t matter.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The level of focus and effectiveness last week was remarkable. For Mozilla Research’s part, we coordinated with multiple groups, planned 2015 projects, worked through controversial technical decisions, removed obstacles, brought new contributors on board, and even managed to get a bunch of project work done all at the same time.&lt;/p&gt;

&lt;p&gt;There were a few things that made last week a success:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulating the vision&lt;/strong&gt;: Leaders have to continually retell their people’s story. This isn’t just about morale, although that’s important. It’s about onboarding new folks, reminding old-timers of the big picture, getting people to re-evaluate their projects against the vision, and providing a group with the vocabulary to help them articulate it themselves.&lt;/p&gt;

&lt;p&gt;While Portland was primarily a work week, it’s always a good thing for leadership to grab the opportunity to articulate the vision. This is something that Mitchell Baker has always been especially good at doing, particularly in connecting our work back to Mozilla’s mission; but Chris and others also did a good job of framing our work around building amazing products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loosely structured proximity&lt;/strong&gt;: The majority of the work days were spent without excessive organization, leaving broad groups of people in close proximity but with the freedom to seek out the specific contact they needed. Managers were able to set aside quieter space for the groups of people that needed to get more heads down work done, but large groups (for example, most of Platform) were close enough together that you could find people for impromptu conversations, whether on purpose or – just as important! – by accident.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-team coordination&lt;/strong&gt;: Remote teams are the life blood of Mozilla. We have a lot of techniques for making remote teams effective. But it can be harder to coordinate across teams, because they don’t have the same pre-existing relationships, or as many opportunities for face-to-face interaction. Last week, Mozilla Research got a bunch of opportunities to build new relationships with other teams and have higher-bandwidth conversations about tricky coordination topics.&lt;/p&gt;

&lt;p&gt;I hope we do this kind of event again. There’s nontrivial overhead, and a proper cadence to these things, but every once in a while, getting everyone together pays off.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Mozilla" />
      

      

      
        <summary type="html">When Chris Beard first announced that over a thousand Mozilla staff and contributors would be descending on Portland this month for an all-hands work week, I worried about two things. I knew a couple of the groups in my department would be approaching deadlines. And I was afraid that so many groups of people in one place would be chaotic and hard to coordinate. I wasn’t even wrong – but it didn’t matter.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">I’m Running for the W3C TAG</title>
      
      
      <link href="http://localhost:4000/blog/2014/01/02/i-m-running-for-the-w3c-tag/" rel="alternate" type="text/html" title="I’m Running for the W3C TAG" />
      
      <published>2014-01-02T07:07:25-08:00</published>
      <updated>2014-01-02T07:07:25-08:00</updated>
      <id>http://localhost:4000/blog/2014/01/02/i-m-running-for-the-w3c-tag</id>
      <content type="html" xml:base="http://localhost:4000/blog/2014/01/02/i-m-running-for-the-w3c-tag/">&lt;p&gt;The W3C’s Technical Architecture Group (TAG) has two open seats for 2014, and &lt;a href=&quot;http://lists.w3.org/Archives/Public/www-tag/2013Dec/0004.html&quot;&gt;I’m running for one of those seats&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In recent years a reform effort has been underway to help the TAG to improve the cohesiveness and transparency of the many moving parts of Web standards. &lt;a href=&quot;http://domenic.me/2013/12/02/continual-progress-in-the-w3c-tag/&quot;&gt;Domenic Denicola and I would like to help continue that reform process&lt;/a&gt;. My particular interests in running focus on several themes:&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;designing-for-extensibility&quot;&gt;Designing for Extensibility&lt;/h2&gt;

&lt;p&gt;I’m an original co-signer of the &lt;a href=&quot;http://extensiblewebmanifesto.org/&quot;&gt;Extensible Web Manifesto&lt;/a&gt;, which urges Web standards to focus on powerful, efficient, and composable primitives, in order to allow developers — who are far more efficient and scalable than standards can ever be — to innovate building higher layers of the platform. The TAG has recognized the Extensible Web as a core principle. We need to build on this momentum to continue educating people about how the principles play out in practice for designing new APIs and platform capabilities that &lt;a href=&quot;https://medium.com/the-future-of-the-web/2fcd1c1bb32&quot;&gt;empower developers to extend the web forward&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;thinking-big-and-working-collaboratively&quot;&gt;Thinking Big and Working Collaboratively&lt;/h2&gt;

&lt;p&gt;For the Web to compete with native platforms, I believe we have to think big. This means building on our competitive strengths like &lt;a href=&quot;http://www.youtube.com/watch?v=BQ6at0addi4&quot;&gt;URLs&lt;/a&gt; and dynamic loading, as well as taking a hard look at our platform’s weaknesses — lack of access to modern hardware, failures of the offline experience, or limitations of cross-origin communication, to name a few. My entire job at Mozilla Research is focused on thinking big: from ES6 modules to &lt;a href=&quot;http://asmjs.org&quot;&gt;asm.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozilla/servo/&quot;&gt;Servo&lt;/a&gt;, my goal is to push the Web as far forward as possible. I’m running for TAG because I believe it’s an opportunity to set and articulate big goals for the Web.&lt;/p&gt;

&lt;p&gt;At the same time, standards only work by getting people working together. My experience with open source software and standards work — particularly in shepherding the process of getting modules into ES6 — has taught me that the best way to build community consensus is the &lt;a href=&quot;https://blog.lizardwrangler.com/2006/07/05/layers-of-the-onion/&quot;&gt;layers of the onion&lt;/a&gt; approach: bring together key stakeholders and subject experts and iteratively widen the conversation. It’s critical to identify those stakeholders early, particularly developers. Often we see requests for developer feedback too late in the process, at which point flawed assumptions are too deeply baked into the core structure of a solution. The most successful standards involve close and continuous collaboration with experienced, productive developers. Pioneers like &lt;a href=&quot;https://twitter.com/wycats&quot;&gt;Yehuda Katz&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/domenic&quot;&gt;Domenic Denicola&lt;/a&gt; are blazing trails building &lt;a href=&quot;http://www.youtube.com/watch?v=hneN6aW-d9w&quot;&gt;better collaboration models&lt;/a&gt; between developers and platform vendors. Beyond the bully pulpit, the TAG should actively identify and approach stakeholders to initiate important collaborations.&lt;/p&gt;

&lt;h2 id=&quot;articulating-design-principles&quot;&gt;Articulating Design Principles&lt;/h2&gt;

&lt;p&gt;When Alex Russell joined the TAG, he &lt;a href=&quot;http://infrequently.org/2012/12/reforming-the-w3c-tag/&quot;&gt;advocated for setting forth principles for idiomatic Web API design&lt;/a&gt;. We can do this in part by advising standards work in progress, which is the ongoing purview of the TAG. Web API creators are often browser implementors, who are under aggressive schedules to ship functionality, and don’t always have the firsthand experience of using the API’s they create. Worse yet, they sometimes break key invariants of JavaScript that the creators, who are often primarily C++ programmers, didn’t understand. One area of particular concern to me is data races: several API’s, including the &lt;a href=&quot;http://www.w3.org/TR/file-system-api/&quot;&gt;File API&lt;/a&gt; and some &lt;a href=&quot;http://lists.w3.org/Archives/Public/public-audio/2013AprJun/thread.html#msg644&quot;&gt;proposed extensions to WebAudio&lt;/a&gt; introduce &lt;a href=&quot;http://blog.regehr.org/archives/490&quot;&gt;low-level data races&lt;/a&gt; into JavaScript, something that has been carefully avoided since the run-to-completion model was introduced on Day 1.&lt;/p&gt;

&lt;p&gt;And there’s room to lead more proactively still. One area I’d like to help with is in evolving or reforming &lt;a href=&quot;http://www.w3.org/TR/WebIDL/&quot;&gt;WebIDL&lt;/a&gt;, which is used by browser vendors to specify and implement Web API’s, but which carries a legacy of more C++- and Java-centric API’s. Several current members of TAG have begun investigating &lt;a href=&quot;https://github.com/w3ctag/jsidl&quot;&gt;alternatives to WebIDL&lt;/a&gt; that can provide the same convenience for creating libraries but that lead to more idiomatic API’s.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’re a developer who finds my perspective compelling, I’d certainly appreciate your public expression of support. If you belong to a voting member organization, I’d very much appreciate your organization’s vote.&lt;/strong&gt; I also highly recommend &lt;a href=&quot;http://domenic.me/2013/12/02/continual-progress-in-the-w3c-tag/&quot;&gt;Domenic Denicola&lt;/a&gt; as the other candidate whose vision and track record are most closely aligned with my own. Thanks!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="W3C" />
      
        <category term="TAG" />
      

      

      
        <summary type="html">The W3C’s Technical Architecture Group (TAG) has two open seats for 2014, and I’m running for one of those seats. In recent years a reform effort has been underway to help the TAG to improve the cohesiveness and transparency of the many moving parts of Web standards. Domenic Denicola and I would like to help continue that reform process. My particular interests in running focus on several themes:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">On “On Asm.js”</title>
      
      
      <link href="http://localhost:4000/blog/2013/11/27/on-on-asm-js/" rel="alternate" type="text/html" title="On “On Asm.js”" />
      
      <published>2013-11-27T07:17:48-08:00</published>
      <updated>2013-11-27T07:17:48-08:00</updated>
      <id>http://localhost:4000/blog/2013/11/27/on-on-asm-js</id>
      <content type="html" xml:base="http://localhost:4000/blog/2013/11/27/on-on-asm-js/">&lt;p&gt;On his &lt;a href=&quot;http://acko.net/blog&quot;&gt;impossibly beautiful blog&lt;/a&gt; (seriously, it’s amazing, take some time to bask in it), Steven Wittens &lt;a href=&quot;http://acko.net/blog/on-asmjs/&quot;&gt;expressed some sadness&lt;/a&gt; about &lt;a href=&quot;http://asmjs.org&quot;&gt;asm.js&lt;/a&gt;. It’s an understandable feeling: he compares asm.js to compatibility hacks like UTF-8 and x86, and longs for the browser vendors to “sit down and define the most basic glue that binds their platforms”—referring to a computational baseline that could form a robust and portable VM for the web.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I get it: it’s surprising to see a makeshift VM find its way into the web via JavaScript, rather than through the perhaps more direct approach of a &lt;a href=&quot;http://mozakai.blogspot.com/2013/05/the-elusive-universal-web-bytecode.html&quot;&gt;new bytecode language&lt;/a&gt; and standardization effort. What’s more, it has become clear to me that emotions always run high when it comes to JavaScript. It’s easy for observers to suspect that what we’re doing is the result of a blind fealty to JavaScript. But the fact is, our strategy has nothing to do with the success of JavaScript. It’s about the success of the &lt;em&gt;web&lt;/em&gt;. On a shared medium like the web, where content has to run across all OSes, platforms, and browsers, backwards-compatible strategies are far more likely to succeed than discrete jumps. In short, we’re betting on evolution because it works: UTF-8 and x86 may be ugly hacks, but the reason we’re talking about them at all is that they’re success stories.&lt;/p&gt;

&lt;p&gt;There’s more work to be done, but between &lt;a href=&quot;http://jlongster.com/s/lljs-cloth/&quot;&gt;sweet&lt;/a&gt; &lt;a href=&quot;http://www.flohofwoe.net/demos.html&quot;&gt;demos&lt;/a&gt;, rapid improvements in &lt;a href=&quot;https://blog.mozilla.org/futurereleases/2013/11/26/chrome-and-opera-optimize-for-mozilla-pioneered-asm-js/&quot;&gt;browser performance&lt;/a&gt;, and the narrowing gap to native via &lt;a href=&quot;https://blog.mozilla.org/javascript/2013/11/07/efficient-float32-arithmetic-in-javascript/&quot;&gt;float32&lt;/a&gt; and &lt;a href=&quot;https://github.com/johnmccutchan/ecmascript_simd&quot;&gt;SIMD&lt;/a&gt;, I see plenty of reason to keep betting on evolution. The truth is, in my heart I’m an idealist. I love beautiful, clean designs done right from scratch. (I spent my academic years working in Scheme, after all!) But my head tells me that this is the right bet. In fact, I’ve spent my career at Mozilla betting on evolution: growing JavaScript with &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:modules&quot;&gt;modules&lt;/a&gt; and &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes&quot;&gt;classes&lt;/a&gt;, leveling up the internal architecture of browser engines with &lt;a href=&quot;https://github.com/mozilla/servo/&quot;&gt;Servo&lt;/a&gt;, and kicking the web’s virtualization powers into high gear with asm.js.&lt;/p&gt;

&lt;p&gt;So for developers like Steven who are put off by the web’s idiosyncratic twists of fate, let’s keep working to build better abstractions to &lt;a href=&quot;http://yehudakatz.com/2013/05/21/extend-the-web-forward/&quot;&gt;extend the web forward&lt;/a&gt;. In particular, in 2014 I want to invest in &lt;a href=&quot;http://lljs.org&quot;&gt;LLJS&lt;/a&gt;, as &lt;a href=&quot;http://jlongster.com/&quot;&gt;James Long&lt;/a&gt; has been doing in his spare time, to build better developer tools for generating high-performance code—and asm.js can be our stepping stone to get there.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="asm.js" />
      
        <category term="evolution" />
      

      

      
        <summary type="html">On his impossibly beautiful blog (seriously, it’s amazing, take some time to bask in it), Steven Wittens expressed some sadness about asm.js. It’s an understandable feeling: he compares asm.js to compatibility hacks like UTF-8 and x86, and longs for the browser vendors to “sit down and define the most basic glue that binds their platforms”—referring to a computational baseline that could form a robust and portable VM for the web.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">ECMAScript Doc Sprint next Thursday</title>
      
      
      <link href="http://localhost:4000/blog/2012/08/17/ecmascript-doc-sprint-next-thursday/" rel="alternate" type="text/html" title="ECMAScript Doc Sprint next Thursday" />
      
      <published>2012-08-17T01:43:00-07:00</published>
      <updated>2012-08-17T01:43:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/08/17/ecmascript-doc-sprint-next-thursday</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/08/17/ecmascript-doc-sprint-next-thursday/">&lt;p&gt;I’ve been working on a &lt;a href=&quot;https://github.com/dherman/tc39-codex-wiki&quot;&gt;reboot to the ECMAScript web site&lt;/a&gt; lately, which you can preview at &lt;a href=&quot;http://tc39wiki.calculist.org&quot;&gt;tc39wiki.calculist.org&lt;/a&gt;. One of the most important parts of this will be a set of &lt;a href=&quot;http://tc39wiki.calculist.org/es6/&quot;&gt;high-level descriptions of the proposals for ES6&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We will be hosting a &lt;strong&gt;virtual doc sprint&lt;/strong&gt; to work on these pages next &lt;strong&gt;Thursday, August 23rd&lt;/strong&gt;. If you enjoy writing documentation or coming up with bite-sized example programs to demonstrate new language features, please join us! A few of us will be on US Eastern time, so starting around 9 - 10am UTC-5, and others will be coming online on US Pacific time, around 9am UTC-8. You’re welcome to join us for any part of the day.&lt;/p&gt;

&lt;p&gt;We’ll be hanging out all day in the &lt;code class=&quot;highlighter-rouge&quot;&gt;#jsdocs&lt;/code&gt; channel on &lt;a href=&quot;http://irc.mozilla.org&quot;&gt;irc.mozilla.org&lt;/a&gt;. Hope you can join us!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="announcements" />
      
        <category term="TC39" />
      
        <category term="wiki" />
      

      

      
        <summary type="html">I’ve been working on a reboot to the ECMAScript web site lately, which you can preview at tc39wiki.calculist.org. One of the most important parts of this will be a set of high-level descriptions of the proposals for ES6.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">JavaScript’s two array types</title>
      
      
      <link href="http://localhost:4000/blog/2012/07/16/javascripts-two-array-types/" rel="alternate" type="text/html" title="JavaScript’s two array types" />
      
      <published>2012-07-16T08:06:00-07:00</published>
      <updated>2012-07-16T08:06:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/07/16/javascripts-two-array-types</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/07/16/javascripts-two-array-types/">&lt;p&gt;Imagine a &lt;code class=&quot;highlighter-rouge&quot;&gt;BitSet&lt;/code&gt; constructor with an overloaded API for setting bits:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BitSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;The interface for &lt;code class=&quot;highlighter-rouge&quot;&gt;BitSet.prototype.set&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// set :: (number | [number]) -&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now imagine a &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSet&lt;/code&gt; constructor with an overloaded API for adding strings:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The interface for &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSet.prototype.add&lt;/code&gt; is something like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// add :: (string | [string] | object) -&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These both look pretty similar, but there’s a critical difference. Think about how you might implement &lt;code class=&quot;highlighter-rouge&quot;&gt;BitSet.prototype.set&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;BitSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// number case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// array case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now think about how you might implement &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSet.prototype.add&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;StringSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// string case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// array case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* hmmmm... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// object case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s the difference? &lt;code class=&quot;highlighter-rouge&quot;&gt;BitSet.prototype.set&lt;/code&gt; doesn’t have to test whether its argument is an array. It’ll work for any object that acts like an array (i.e., has indexed properties and a numeric &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; property). It’ll even accept values like an &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; object, a &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt;, some custom object you create that acts like an array, or even a primitive string.&lt;/p&gt;

&lt;p&gt;But &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSet.prototype.add&lt;/code&gt; actually needs a test to see if &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is an array. How do you distinguish between arrays and objects when JavaScript arrays &lt;em&gt;are&lt;/em&gt; objects?&lt;/p&gt;

&lt;p&gt;One answer you’ll sometimes see is what I call “duck testing”: use some sort of heuristic that &lt;em&gt;probably&lt;/em&gt; indicates the client intended the argument to be an array:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Beware the word “probably” in programming! Duck testing is a horribly medieval form of computer science:&lt;/p&gt;

&lt;iframe class=&quot;video&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;http://www.youtube.com/embed/zrzMhU_4m-g&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;For example, what happens when a user happens to pass in a dictionary object with the string &lt;code class=&quot;highlighter-rouge&quot;&gt;'length'&lt;/code&gt;?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;symbolTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The user clearly intended this to be the dictionary case, but the duck test saw a numeric &lt;code class=&quot;highlighter-rouge&quot;&gt;'length'&lt;/code&gt; property and gleefully proclaimed “it’s an array!”&lt;/p&gt;

&lt;p&gt;This comes down to the difference between &lt;em&gt;nominal&lt;/em&gt; and &lt;em&gt;structural&lt;/em&gt; types.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;nominal type&lt;/strong&gt; is a type that has a unique identity or “brand.” It carries a tag with it that can be atomically tested to distinguish it from other types.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;structural type&lt;/strong&gt;, also known as a duck type, is a kind of interface: it’s just a contract that mandates certain behaviors, but doesn’t say anything about what specific implementation is used to provide that behavior. The reason people have such a hard time figuring out how to test for structural types is that they are designed specifically &lt;em&gt;not to be testable&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;There are a few common scenarios in dynamically typed languages where you need to do dynamic type testing, such as error checking, debugging, and inrospection. But the most common case is when implementing overloaded API’s like the &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; methods above.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BitSet.prototype.set&lt;/code&gt; method treats arrays as a structural type: they can be any kind of value whatsoever as long as they have indexed properties with corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;. But &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSet.prototype.add&lt;/code&gt; overloads array and object types, so it has to check for “arrayness.” And you can’t reliably check for structural types.&lt;/p&gt;

&lt;p&gt;It’s specifically when you &lt;strong&gt;overload arrays and objects&lt;/strong&gt; that you need a predictable nominal type test. One answer would be to punt and change the API so the client has to explicitly tag the variants:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This overloads three different objects types that can be distinguished by their relevant property names. Or you could get rid of overloading altogether:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But these API’s are heavier and clunkier. Rather than rigidly avoiding overloading arrays and objects, the lighter-weight approach is to use JavaScript’s latent notion of a “true” array: an object whose &lt;a href=&quot;http://es5.github.com/#x8.6.2&quot;&gt;[[Class]] internal property&lt;/a&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Array&quot;&lt;/code&gt;. That internal property serves as the brand for a built-in nominal type of JavaScript. And it’s a pretty good candidate for a universally available nominal type: clients get the concise array literal syntax, and the ES5 &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray&quot;&gt;Array.isArray&lt;/a&gt; function (which can be &lt;a href=&quot;http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/&quot;&gt;shimmed pretty reliably&lt;/a&gt; in older JavaScript engines) provides the exact test needed to implement the API.&lt;/p&gt;

&lt;p&gt;But this test is very different from the structural type accepted by &lt;code class=&quot;highlighter-rouge&quot;&gt;BitSet.prototype.set&lt;/code&gt;. For example, you can’t pass an &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; object to &lt;code class=&quot;highlighter-rouge&quot;&gt;StringSet.prototype.add&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wibbles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This code clearly means to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; as an array, but it’ll get interpreted as a dictionary. Similarly, you can’t pass a &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt;, or a primitive string, or any other JavaScript value that acts array-like.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;JavaScript has &lt;em&gt;two&lt;/em&gt; latent concepts of array types&lt;/strong&gt;. Library writers should clearly document when their API’s accept any &lt;em&gt;array-like&lt;/em&gt; value (i.e., the structural type) and when they require a true array (i.e., the nominal type). That way clients know whether they need to convert array-like values to true arrays before passing them in.&lt;/p&gt;

&lt;p&gt;As a final note, ES6’s &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=strawman:array_extras&quot;&gt;Array.from&lt;/a&gt; API will do that exact conversion. This would make it very convenient, for example, for the &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; method above to be fixed:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wibbles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Thanks to Rick Waldron for helping me come to this understanding during an awesome IRC conversation this morning.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="JavaScript" />
      
        <category term="arrays" />
      
        <category term="nominal types" />
      
        <category term="structural types" />
      
        <category term="duck types" />
      
        <category term="duck testing" />
      

      

      
        <summary type="html">Imagine a BitSet constructor with an overloaded API for setting bits: var bits = new BitSet(); bits.set(4); bits.set([1, 4, 8, 17]);</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Tweaking the JavaScript AST API</title>
      
      
      <link href="http://localhost:4000/blog/2012/07/03/tweaking-the-javascript-ast-api/" rel="alternate" type="text/html" title="Tweaking the JavaScript AST API" />
      
      <published>2012-07-03T04:53:00-07:00</published>
      <updated>2012-07-03T04:53:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/07/03/tweaking-the-javascript-ast-api</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/07/03/tweaking-the-javascript-ast-api/">&lt;p&gt;A couple years ago I created a &lt;a href=&quot;https://developer.mozilla.org/en/SpiderMonkey/Parser_API&quot;&gt;JavaScript parser API&lt;/a&gt; and implemented SpiderMonkey’s &lt;a href=&quot;https://developer.mozilla.org/en/SpiderMonkey/Parser_API#Reflect.parse%28src.5B.2C_options.5D%29&quot;&gt;Reflect.parse&lt;/a&gt; library. Since then, there have been a couple of pure JavaScript implementations of the API, including Zach Carter’s &lt;a href=&quot;https://github.com/zaach/reflect.js&quot;&gt;reflect.js&lt;/a&gt; and Ariya Hidayat’s &lt;a href=&quot;http://esprima.org&quot;&gt;Esprima&lt;/a&gt; parser.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Over time, I’ve gotten a bunch of good critiques about the API from people. I probably don’t want to make any huge changes, but there are a couple of small changes that would be nice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=770567&quot;&gt;Bug 770567&lt;/a&gt; - rename &lt;code class=&quot;highlighter-rouge&quot;&gt;callee&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; to match the documentation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=742612&quot;&gt;Bug 742612&lt;/a&gt; - separate guarded/unguarded catch clauses&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=745678&quot;&gt;Bug 745678&lt;/a&gt; - range-based location info&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ariya is graciously willing to change Esprima to keep in sync with SpiderMonkey. But some of these would affect existing clients of either library. I wanted to post this publicly to ask if there’s anyone who would be opposed to us making the change. Ariya and I would make sure to be very clear about when we’re making the change, and we’d try to batch the changes so that people don’t have to keep repeatedly updating their code.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if you are using Esprima or &lt;code class=&quot;highlighter-rouge&quot;&gt;Reflect.parse&lt;/code&gt; and have thoughts about this.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="JavaScript" />
      
        <category term="AST" />
      
        <category term="Parser API" />
      
        <category term="Esprima" />
      

      

      
        <summary type="html">A couple years ago I created a JavaScript parser API and implemented SpiderMonkey’s Reflect.parse library. Since then, there have been a couple of pure JavaScript implementations of the API, including Zach Carter’s reflect.js and Ariya Hidayat’s Esprima parser.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Static module resolution</title>
      
      
      <link href="http://localhost:4000/blog/2012/06/29/static-module-resolution/" rel="alternate" type="text/html" title="Static module resolution" />
      
      <published>2012-06-29T06:41:00-07:00</published>
      <updated>2012-06-29T06:41:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/06/29/static-module-resolution</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/06/29/static-module-resolution/">&lt;p&gt;I haven’t spoken enough about the rationale for declarative, static module resolution in &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:modules&quot;&gt;ES6 modules&lt;/a&gt;. Since multiple module systems exist in pure JS, the concept of modules that involve new syntax is coming across as foreign to people. I’d like to explain the motivation.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, a quick explanation of what this is about. In a pure-JS system like CommonJS, modules are just objects, and whatever definitions they export can be imported by a client with object property lookup:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By contrast, in the ES6 module system, modules are not objects, they’re declarative collections of code. Importing definitions from a module is also declarative:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This import is resolved at compile time — that is, before the script starts executing. All the imports and exports of the declarative module dependency graph are resolved before execution. (There’s also an asynchronous dynamic loading API; it’s of course important to be able to defer module loading to runtime. But this post is about the resolution of a declarative module dependency graph.)&lt;/p&gt;

&lt;h2 id=&quot;on-the-origin-of-specs&quot;&gt;On the origin of specs&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;right&quot; src=&quot;/img/evolution.jpg&quot; /&gt; Node leaders are arguing that we should take more incremental, evolutionary steps, that we should hew more closely to the module systems that exist today. I have a lot of sympathy for the “pave the cowpaths” philosophy, and I often argue for it. But the module systems people have built for JavaScript to date did not have the option of modifying the language. We have an opportunity to move JS in directions where a purely dynamic system could never go.&lt;/p&gt;

&lt;p&gt;What are some of those directions?&lt;/p&gt;

&lt;h2 id=&quot;fast-lookup&quot;&gt;Fast lookup&lt;/h2&gt;

&lt;p&gt;Static imports (whether via &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; or references like &lt;code class=&quot;highlighter-rouge&quot;&gt;m.foo&lt;/code&gt;) can always be compiled like variable references. In a dynamic module system, an explicit dereference like &lt;code class=&quot;highlighter-rouge&quot;&gt;m.foo&lt;/code&gt; will be an object reference, which will generally require &lt;a href=&quot;http://blog.cdleary.com/2010/09/picing-on-javascript-for-fun-and-profit/&quot;&gt;PIC guards&lt;/a&gt;. If you copy them into locals, they’ll be more optimizable in some cases, but with static modules you always predictably get early binding. Keeping module references as cheap as variable references makes modular programs faster and avoids imposing a tax on modular code.&lt;/p&gt;

&lt;h2 id=&quot;early-variable-checking&quot;&gt;Early variable checking&lt;/h2&gt;

&lt;p&gt;Having variable references, including imports and exports, checked before a script starts running is, in my experience, very useful for making sure the basic top-level structure of a program is sane. JavaScript is almost statically scoped, and this is our one and only chance to get there. James Burke dismisses this as a kind of &lt;a href=&quot;http://tagneto.blogspot.ca/2012/06/es-modules-suggestions-for-improvement.html&quot;&gt;shallow type checking&lt;/a&gt;, which he claims is not enough to be useful. My experience in other languages says otherwise — it is super useful! Variable checking is a nice sweet spot where you can still write expressive dynamic programs, but catch really basic and common errors. As Anton Kovalyov points out, unbound variable reporting is a &lt;a href=&quot;https://mail.mozilla.org/pipermail/es-discuss/2012-June/023777.html&quot;&gt;popular feature in JSHint&lt;/a&gt;, and it’s so much nicer not to have to run a separate linter to catch these bugs.&lt;/p&gt;

&lt;h2 id=&quot;cyclic-dependencies&quot;&gt;Cyclic dependencies&lt;/h2&gt;

&lt;p&gt;Allowing cyclic dependencies between modules is really important. Mutual recursion is a fact of programming. It occurs sometimes without you even noticing it. If you try splitting up your program into modules and the system breaks because it can’t handle cycles, the easiest workaround is just to keep everything together in one big module. Module systems should not prevent programmers from splitting up their program however they see fit. They should not provide disincentives from writing modular programs.&lt;/p&gt;

&lt;p&gt;This isn’t impossible with dynamic systems, but it tends to be something I see treated as an afterthought by alternative proposals. It’s something we’ve thought very carefully about for ES6. Also, declarative modules allow you to pre-initialize more of the module structure before executing any code, so that you can give better errors if someone refers to a not-yet-assigned export. For example, a &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; binding throws if you refer to it before it’s been assigned, and you get a clear error message. This is much easier to diagnose than referring to a property of a dynamic module object that just isn’t even there yet, getting &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, and having to trace the eventual error back to the source.&lt;/p&gt;

&lt;h2 id=&quot;future-compatibility-for-macros&quot;&gt;Future-compatibility for macros&lt;/h2&gt;

&lt;p&gt;One of the things I would love to see in JavaScript’s future is the ability for programmers to come up with their own custom syntax extensions without having to wait for TC39 to add it. Today, people invent new syntax by writing their own compilers. But this is extremely hard to do, and you can’t use different syntax features from different compilers in a single source file.&lt;/p&gt;

&lt;p&gt;With macros, you might implement, say, a new &lt;code class=&quot;highlighter-rouge&quot;&gt;cond&lt;/code&gt; syntax that makes a nicer alternative to chaining &lt;code class=&quot;highlighter-rouge&quot;&gt;? :&lt;/code&gt; conditionals, and share that via a library:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cond.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;cond&lt;/code&gt; macro would preprocess this into a chain of conditionals before the program runs. Preprocessing doesn’t work with purely dynamic modules:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cond.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// impossible to preprocess because we haven't evaluated the require!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* etc */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;future-compatibility-for-types&quot;&gt;Future-compatibility for types&lt;/h2&gt;

&lt;p&gt;I joined TC39 in the ill-fated ES4 days, when the committee was working on an optional type system for JS. It was built on sketchy foundations and ultimately fell apart. One of the things that was really lacking was a module system where you could draw a boundary around a section of code and say “this part needs to be type-checked.” Otherwise you never knew if more code was going to be appended later.&lt;/p&gt;

&lt;p&gt;Why types? Here’s one reason: JS is fast and getting faster, but it only gets &lt;a href=&quot;http://blog.mrale.ph/post/12396216081/the-trap-of-the-performance-sweet-spot&quot;&gt;harder to predict performance&lt;/a&gt;. With experiments like &lt;a href=&quot;http://lljs.org&quot;&gt;LLJS&lt;/a&gt;, my group at Mozilla is playing with dialects of JS that use types to pre-compile offline and generate some pretty funky JS code optimized for current JIT’s. But if you could just directly write your high-performance kernels in a typed dialect of JS, modern compilers could go to town with it.&lt;/p&gt;

&lt;p&gt;With declarative resolution, you can import and export typed definitions and they can all be checked at compile-time. Dynamic imports can’t be statically checked.&lt;/p&gt;

&lt;h2 id=&quot;inter-language-modularity&quot;&gt;Inter-language modularity&lt;/h2&gt;

&lt;p&gt;Some people may not care about or want features like macros or types. But JavaScript has to serve many different programmers who come with many different development practices and needs. And one of the ways it can do so is by allowing people to use their own languages that compile to JavaScript. So even if macros or types aren’t in the future of the ECMAScript standard, it’d be pretty great if you could use statically typed or macro-enabled dialects of JS offline that compile to browser-compatible JS. People are already doing this kind of thing today with the &lt;a href=&quot;https://developers.google.com/closure/compiler/&quot;&gt;Closure compiler&lt;/a&gt;’s type checking, or the &lt;a href=&quot;http://roy.brianmckenna.org/&quot;&gt;Roy&lt;/a&gt; language, or &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt;. A static module system is more universally and straightforwardly compatible with a wider range of languages.&lt;/p&gt;

&lt;h2 id=&quot;costs-and-benefits&quot;&gt;Costs and benefits&lt;/h2&gt;

&lt;p&gt;The above are some of the benefits that I see to declarative module resolution. Isaac Schlueter says the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; syntax &lt;a href=&quot;http://blog.izs.me/post/25906678790/on-es-6-modules&quot;&gt;adds nothing&lt;/a&gt;. That’s unfair and wrong. It’s there for a purpose. I don’t believe that a declarative import syntax is a high cost for the benefit both to ES6 and to potential future editions.&lt;/p&gt;

&lt;h2 id=&quot;ps-whats-all-this-about-python&quot;&gt;PS: What’s all this about Python?&lt;/h2&gt;

&lt;p&gt;One last thing: people keep claiming that the ES6 module system came from Python. I don’t even have very much experience with Python. And Python’s modules are more mutable and their scope is more dynamic. Personally, I’ve drawn inspiration from &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt;, which has gotten lots of mileage out of its &lt;a href=&quot;http://docs.racket-lang.org/guide/Module_Syntax.html&quot;&gt;declarative module system&lt;/a&gt;. They’ve leveraged static modules to build a macro system, early variable checking, optimized references, dynamic contracts with module-based blame reporting, multi-language interoperability, and a statically typed dialect.&lt;/p&gt;

&lt;p&gt;I’m not interested in making JavaScript into some other language. But you can learn a lot from studying precedent in other languages. I’ve seen firsthand the benefits you can get from a declarative module system in a dynamic language.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      

      

      
        <summary type="html">I haven’t spoken enough about the rationale for declarative, static module resolution in ES6 modules. Since multiple module systems exist in pure JS, the concept of modules that involve new syntax is coming across as foreign to people. I’d like to explain the motivation.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The little-endian web!</title>
      
      
      <link href="http://localhost:4000/blog/2012/04/25/the-little-endian-web/" rel="alternate" type="text/html" title="The little-endian web!" />
      
      <published>2012-04-25T05:29:00-07:00</published>
      <updated>2012-04-25T05:29:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/04/25/the-little-endian-web</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/04/25/the-little-endian-web/">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/The_Gates_of_Hell&quot;&gt;&lt;img class=&quot;right&quot; src=&quot;/assets/gates-of-hell.jpg&quot; style=&quot;width: 100px; height: 163px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/blog/2012/04/24/the-little-endian-web/&quot;&gt;This&lt;/a&gt; feels a little bit like the web platform having opened a door to hell and Zombies running out of it. I wonder if we can ever close it again.
– &lt;a href=&quot;https://plus.google.com/u/1/116910304844117268718/posts/9fdegEJkAtt&quot;&gt;Malte Ubl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see if we can. I’ve had a bunch of productive conversations since my &lt;a href=&quot;/blog/2012/04/24/the-little-endian-web/&quot;&gt;post&lt;/a&gt; the other day.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I talked about how specifying little-endian would force big-endian browser vendors to choose one implementation strategy — emulate little-endian by byte-swapping and try to optimize as best they can — and concluded that it was better to let them decide for themselves and see how the market shakes out before specifying. But that doesn’t take into account the cost to web developers, which should always be the first priority (mea culpa).&lt;/p&gt;

&lt;p&gt;Leaving it unspecified or forcing developers to opt in to a specified endianness taxes developers: it leaves them open to the possibility of their sites breaking on systems they likely can’t even test on, or forces them to make sure they pass the argument (in which case, they’d always be one forgotten argument away from possible bustage on some platform they can’t test on).&lt;/p&gt;

&lt;p&gt;Imagine that instead of defaulting to unspecified behavior, we defaulted to little-endian — which is the de facto semantics of the web today — but apps could opt in to big-endian with an optional argument. Then a carefully-written app could use this (in combination with, say, a &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.endianness&lt;/code&gt; feature test API) to decide which byte order would give them better performance. On little-endian systems, they’d use little-endian, on big-endian systems, they’d use big-endian. Less carefully-written apps that just went with the default might get some performance degradation in big-endian platforms, but we don’t actually know how bad it would be. But crucially, &lt;strong&gt;there would be no way to accidentally break your app’s behavior&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But let me take it one step further. I don’t even think we know that that additional option will be needed. For now, we don’t even know of any big-endian user agents that are implementing WebGL, nor do we know if byte-swapping will be prohibitively expensive. Until then, I say any additional API surface area is premature optimization. &lt;a href=&quot;http://en.wikipedia.org/wiki/You_ain%27t_gonna_need_it&quot;&gt;YAGNI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary: let’s prioritize web developers over hypothetical performance issues on hypothetical browsers. &lt;strong&gt;Typed arrays should be standardized as little-endian&lt;/strong&gt; — full stop.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="typed arrays" />
      
        <category term="binary data" />
      
        <category term="endianness" />
      

      

      
        <summary type="html">This feels a little bit like the web platform having opened a door to hell and Zombies running out of it. I wonder if we can ever close it again. – Malte Ubl Let’s see if we can. I’ve had a bunch of productive conversations since my post the other day.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The little-endian web?</title>
      
      
      <link href="http://localhost:4000/blog/2012/04/24/the-little-endian-web/" rel="alternate" type="text/html" title="The little-endian web?" />
      
      <published>2012-04-24T15:32:00-07:00</published>
      <updated>2012-04-24T15:32:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/04/24/the-little-endian-web</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/04/24/the-little-endian-web/">&lt;p&gt;Here’s the deal: &lt;a href=&quot;http://www.khronos.org/registry/typedarray/specs/latest/&quot;&gt;typed arrays&lt;/a&gt; are not fully portable. On most browsers, this code will print 1:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uint32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;But the typed arrays spec doesn’t specify a byte order. So a browser on a big-endian system (say, a PowerPC console like Xbox or PS3) is allowed to print 0. In short: &lt;strong&gt;casting an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt; to different types is unportable by default.&lt;/strong&gt; It’s up to web developers to canonicalize bytes for different architectures.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;right&quot; src=&quot;/assets/nuxi.jpg&quot; /&gt; Now, we could just require typed arrays to be little-endian, once and for all. After all, almost all platforms are little-endian these days. The few big-endian platforms could just automatically reorder bytes for all typed array accesses. But this would have to be made to work with WebGL, which works by sending application-generated buffers to the GPU. In order to make this work on a big-endian architecture, little-endian-encoded &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt; data would need to be translated when sending back and forth to the GPU. Technically, &lt;a href=&quot;http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2012-March/035236.html&quot;&gt;this might be possible&lt;/a&gt;, but there’s really no evidence that it would have acceptable performance.&lt;/p&gt;

&lt;p&gt;On the other hand, can we really trust that web applications will write portable code? Imagine a &lt;a href=&quot;http://blog.faultylabs.com/files/md5.js&quot;&gt;hashing algorithm&lt;/a&gt; that builds an internal &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt; and casts it to different types. If the code isn’t written portably, it’ll break on a browser implementing big-endian typed arrays.&lt;/p&gt;

&lt;p&gt;This leaves big-endian browsers with a &lt;strong&gt;nasty decision&lt;/strong&gt;: try to emulate little-endian typed arrays to protect against unportable application logic, and suffer the complexity and performance costs of translating data back and forth to the GPU, or just hope that not too many web pages break. Or perhaps surface an annoying decision to users: do you want to run this application in fast mode or correct mode?&lt;/p&gt;

&lt;p&gt;For now, we should let browser vendors on big-endian systems make that decision, and not force the decision through the spec. If they end up all choosing to emulate little-endian, I’ll be happy to codify that in the standards. As I understand it, &lt;a href=&quot;http://www.floodgap.com/software/tenfourfox/&quot;&gt;TenFourFox&lt;/a&gt; can’t support WebGL, so there the best decision is probably to emulate little-endianness. On an Xbox, I would guess WebGL performance would be a higher priority than web sites using internal &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;s. But I’m not sure. I’d say this is a decision for big-endian browsers to make, but &lt;strong&gt;I would greatly welcome their input&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the meantime, we should do everything we can to make portability more attractive and convenient. For working with I/O, where you need explicit control over endianness, applications can use &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript_typed_arrays/DataView&quot;&gt;DataView&lt;/a&gt;. For heterogeneous data, there’ll be ES6 &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:binary_data&quot;&gt;structs&lt;/a&gt;. Finally, I’d like to add an option for &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;s and typed arrays to be given an optional explicit endianness:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;little&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a little-endian buffer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uint32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// must be 1, regardless of system architecture&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the endianness specified explicitly, you can still easily write portable logic even when casting — without having to canonicalize bytes yourself. &lt;a href=&quot;https://github.com/kripken/emscripten&quot;&gt;Emscripten&lt;/a&gt; and &lt;a href=&quot;http://www.mandreel.com/&quot;&gt;Mandreel&lt;/a&gt; could benefit from this increased portability, for example, and I think crypto algorithms would as well. I’ll propose this extension to Khronos and TC39, and discuss it with JavaScript engine implementors.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="typed arrays" />
      
        <category term="binary data" />
      
        <category term="endianness" />
      

      

      
        <summary type="html">Here’s the deal: typed arrays are not fully portable. On most browsers, this code will print 1: var a1 = new Uint32Array([1]); var a2 = new Uint8Array(a1.buffer); console.log(a2[0])</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Homoiconicity isn’t the point</title>
      
      
      <link href="http://localhost:4000/blog/2012/04/17/homoiconicity-isnt-the-point/" rel="alternate" type="text/html" title="Homoiconicity isn’t the point" />
      
      <published>2012-04-17T00:51:00-07:00</published>
      <updated>2012-04-17T00:51:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/04/17/homoiconicity-isnt-the-point</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/04/17/homoiconicity-isnt-the-point/">&lt;p&gt;I’ve never really understood what “homoiconic” is supposed to mean. People often say something like “the syntax uses one of the language’s basic data structures.” That’s a category error: syntax is not a data structure, it’s just a representation of data as text. Or you hear “&lt;a href=&quot;http://smallcultfollowing.com/babysteps/blog/2012/04/15/syntax-matters-dot-dot-dot/&quot;&gt;the syntax of the language is the same as the syntax of its data structures&lt;/a&gt;.” But S-expressions don’t “belong” to Lisp; there’s no reason why Perl or Haskell or JavaScript couldn’t have S-expression libraries. And every parser generates a data structure, so if you have a &lt;a href=&quot;http://docs.python.org/library/parser.html&quot;&gt;Python parser in Python&lt;/a&gt;, then is Python homoiconic? Is &lt;a href=&quot;http://esprima.org/&quot;&gt;JavaScript&lt;/a&gt;?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Maybe there’s a more precise way to define homoiconicity, but frankly I think it misses the point. What makes Lisp’s syntax powerful is not the fact that it can be represented as a data structure, it’s that &lt;strong&gt;it’s possible to &lt;em&gt;read&lt;/em&gt; it without &amp;lt;/em&amp;gt;parsing&amp;lt;/em&amp;gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Wait, what?&lt;/p&gt;

&lt;p&gt;It’s hard to explain these concepts with traditional terminology, because the distinction between reading and parsing simply doesn’t exist for languages without macros.&lt;/p&gt;

&lt;h3 id=&quot;parsing-vs-reading-the-compilers-view&quot;&gt;Parsing vs reading: the compiler’s view&lt;/h3&gt;

&lt;p&gt;In almost every non-Lispy language ever, the front end of every interpreter and compiler looks pretty much the same:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/parse-pipeline.png&quot; alt=&quot;traditional parsing pipeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take the text, run it through a parser, and you get out an AST. But that’s not how it works when you have macros. You simply can’t produce an AST without expanding macros first. So the front-end of a Lispy language usually looks more like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/macro-pipeline.png&quot; alt=&quot;macro pipeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s this intermediate syntax tree? It’s an almost entirely superficial understanding of your program: it basically does paren-matching to create a tree representing the surface nesting structure of the text. This is nowhere near an AST, but it’s just enough for the macro expansion system to do its job.&lt;/p&gt;

&lt;h3 id=&quot;parsing-vs-reading-the-macro-expanders-view&quot;&gt;Parsing vs reading: the macro expander’s view&lt;/h3&gt;

&lt;p&gt;If you see this statement in the middle of a JavaScript program:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;you know for sure that it’s a &lt;em&gt;ForInStatement&lt;/em&gt;, as defined by the spec (I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; because… ES6, that’s why). If you know the grammar of JavaScript, you know the entire structure of the statement. But in Scheme, we could implement &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; as a macro. When the macro expander encounters:&lt;/p&gt;

&lt;div class=&quot;language-scheme highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;it knows nothing about the contents of the expression. All it knows is the macro definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;. But that’s all it needs to know! The expander just takes the two subtrees, &lt;code class=&quot;highlighter-rouge&quot;&gt;(key obj)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;(print key)&lt;/code&gt;, and passes them as arguments to the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; macro.&lt;/p&gt;

&lt;h3 id=&quot;parsing-vs-reading-the-macros-view&quot;&gt;Parsing vs reading: the macro’s view&lt;/h3&gt;

&lt;p&gt;Here’s a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; macro, written in &lt;a href=&quot;http://docs.racket-lang.org/guide/pattern-macros.html#%28part._define-syntax-rule%29&quot;&gt;Racket&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-racket highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define-syntax-rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for-each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This macro works by &lt;a href=&quot;http://en.wikipedia.org/wiki/Pattern_matching&quot;&gt;pattern matching&lt;/a&gt;: it expects two sub-trees, the first of which can itself be broken down into two identifier nodes &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;e1&lt;/code&gt;, and it expands into the &lt;code class=&quot;highlighter-rouge&quot;&gt;for-each&lt;/code&gt; expression. So when the expander calls the macro with the above example, the result of expansion is:&lt;/p&gt;

&lt;div class=&quot;language-racket highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for-each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-power-of-the-parenthesis&quot;&gt;The power of the parenthesis&lt;/h3&gt;

&lt;p&gt;If you’ve ever wondered why Lisp weirdos are so inexplicably attached to their parentheses, this is what it’s all about. Parentheses make it unambiguous for the expander to understand what the arguments to a macro are, because &lt;strong&gt;it’s always clear where the arguments begin and end&lt;/strong&gt;. It knows this without needing to understand anything about what the macro definition is going to do. Imagine trying to define a macro expander for a language with syntax like JavaScript’s. What should the expander do when it sees:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;quux&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mumble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wibble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How many arguments does &lt;code class=&quot;highlighter-rouge&quot;&gt;quux&lt;/code&gt; take? Is the curly-braced argument a block statement or an object literal? Is the thing at the end an arithmetic expression or a regular expression literal? These are all questions that can’t be answered in JavaScript without knowing your parsing context — and macros obscure the parsing context.&lt;/p&gt;

&lt;p&gt;None of this is to say that it’s &lt;em&gt;impossible&lt;/em&gt; to design a macro system for languages with non-Lispy syntax. My point is just that the power of Lisp’s (Scheme’s, Racket’s, Clojure’s, …) macros comes not from being somehow tied to a central data structure of the language, but rather to the expander’s ability to break up a macro call into its separate arguments and then let the macro do all the work of parsing those arguments. In other words, &lt;strong&gt;homoiconicity isn’t the point, &lt;code&gt;read&lt;/code&gt; is&lt;/strong&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="macros" />
      
        <category term="S-expressions" />
      
        <category term="homoiconicity" />
      

      

      
        <summary type="html">I’ve never really understood what “homoiconic” is supposed to mean. People often say something like “the syntax uses one of the language’s basic data structures.” That’s a category error: syntax is not a data structure, it’s just a representation of data as text. Or you hear “the syntax of the language is the same as the syntax of its data structures.” But S-expressions don’t “belong” to Lisp; there’s no reason why Perl or Haskell or JavaScript couldn’t have S-expression libraries. And every parser generates a data structure, so if you have a Python parser in Python, then is Python homoiconic? Is JavaScript?</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Synchronous module loading in ES6</title>
      
      
      <link href="http://localhost:4000/blog/2012/03/29/synchronous-module-loading-in-es6/" rel="alternate" type="text/html" title="Synchronous module loading in ES6" />
      
      <published>2012-03-29T00:41:00-07:00</published>
      <updated>2012-03-29T00:41:00-07:00</updated>
      <id>http://localhost:4000/blog/2012/03/29/synchronous-module-loading-in-es6</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/03/29/synchronous-module-loading-in-es6/">&lt;p&gt;One of the great features of ES6 modules is the direct style module loading syntax:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;underscore.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This makes it as frictionless as possible to grow or refactor your code into multiple modules, and to pull third-party modules into an existing codebase. It also makes a common module format that can be shared between the browser and JS servers like Node.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;But this direct style requires loading its dependencies before it can execute. That is, it’s a synchronous module load. Put in the context of a &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag, this would make it all too easy to block page rendering on I/O:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myelement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'background-color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yellow'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;right&quot; src=&quot;/assets/boromir-sync.jpg&quot; /&gt; Throwing this syntax into the browser like this would be an &lt;a href=&quot;https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Synchronous_and_asynchronous_requests&quot;&gt;invitation to jank&lt;/a&gt;. Thanks to insight from &lt;a href=&quot;http://blogs.msdn.com/b/lukeh&quot;&gt;Luke Hoban&lt;/a&gt;, I think we have the right approach to this for ES6, which is in fact similar to our approach to avoiding turning &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; into a synchronous I/O operation.&lt;/p&gt;

&lt;p&gt;In previous versions of ECMAScript, there’s only one syntactic category of program that you can evaluate, called &lt;code class=&quot;highlighter-rouge&quot;&gt;Program&lt;/code&gt; in the grammar. In ES6, we’ll define a restricted version of the syntax to be used in synchronous settings, which makes it illegal to do synchronous loads. Within a blocking script, the only access to modules is via the dynamic loading API:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myelement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'background-color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yellow'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This eliminates the footgun, and all of your modules can themselves use the synchronous loading syntax. For example, if &lt;code class=&quot;highlighter-rouge&quot;&gt;jquery.js&lt;/code&gt; wants to use a module — say, a data structure library — it can go ahead and load it synchronously:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// jquery.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utils.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But still, this restriction on the top-level loses the convenience of directly importing modules from scripts. Thing is, in an asynchronous context, there’s nothing wrong with doing a synchronous load. So just like the asynchronously loaded &lt;code class=&quot;highlighter-rouge&quot;&gt;jquery.js&lt;/code&gt; can use the synchronous syntax, we can also allow it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myelement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'background-color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yellow'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows the full flexibility and expressiveness of ES6 embedded in HTML, without any hazard of blocking page rendering for I/O.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; function for ES6 will work the same way, disallowing synchronous loading syntax in the grammar it recognizes, to prevent turning it into a synchronous API. We’ll also add an asynchronous version of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; that, like &lt;code class=&quot;highlighter-rouge&quot;&gt;script async&lt;/code&gt;, recognizes the full grammar.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="JavaScript" />
      
        <category term="modules" />
      
        <category term="async" />
      

      

      
        <summary type="html">One of the great features of ES6 modules is the direct style module loading syntax: import map from &quot;underscore.js&quot;; ... map(a, f) ... This makes it as frictionless as possible to grow or refactor your code into multiple modules, and to pull third-party modules into an existing codebase. It also makes a common module format that can be shared between the browser and JS servers like Node.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Two years at MoCo</title>
      
      
      <link href="http://localhost:4000/blog/2012/01/10/two-years-at-moco/" rel="alternate" type="text/html" title="Two years at MoCo" />
      
      <published>2012-01-10T00:13:00-08:00</published>
      <updated>2012-01-10T00:13:00-08:00</updated>
      <id>http://localhost:4000/blog/2012/01/10/two-years-at-moco</id>
      <content type="html" xml:base="http://localhost:4000/blog/2012/01/10/two-years-at-moco/">&lt;p&gt;If I remember right, today is my two year anniversary working full time at Mozilla. And it works out to about six years of working with Mozilla and &lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt;. I could stop and get sentimental, but &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:proposals&quot;&gt;there’s work to do&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="mozilla" />
      

      

      
        <summary type="html">If I remember right, today is my two year anniversary working full time at Mozilla. And it works out to about six years of working with Mozilla and TC39. I could stop and get sentimental, but there’s work to do.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Why coroutines won’t work on the web</title>
      
      
      <link href="http://localhost:4000/blog/2011/12/14/why-coroutines-wont-work-on-the-web/" rel="alternate" type="text/html" title="Why coroutines won’t work on the web" />
      
      <published>2011-12-14T02:30:00-08:00</published>
      <updated>2011-12-14T02:30:00-08:00</updated>
      <id>http://localhost:4000/blog/2011/12/14/why-coroutines-wont-work-on-the-web</id>
      <content type="html" xml:base="http://localhost:4000/blog/2011/12/14/why-coroutines-wont-work-on-the-web/">&lt;p&gt;&lt;img class=&quot;right&quot; src=&quot;/assets/yunocoros.jpg&quot; style=&quot;width: 200px; height: 150px;&quot; /&gt; The topic of coroutines (or
fibers, or continuations) for JavaScript comes up from time to time,
so I figured I’d write down my thoughts on the matter. I admit to
having a soft spot for crazy control-flow features like continuations,
but they’re unlikely ever to make it into ECMAScript. With good
reason.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The big justification for coroutines in JavaScript is non-blocking
I/O. As we all know, asynchronous I/O leads to callback API’s, which
lead to nested lambdas, which lead to… the pyramid of doom:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;preheat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;rice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cooked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dinner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Whereas, if you look at the README for
&lt;a href=&quot;https://github.com/laverdet/node-fibers&quot;&gt;node-fibers&lt;/a&gt;, you’ll see
this pleasant-looking example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wait...'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok...'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That looks pretty sweet. It’s a synchronous version of &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;
that doesn’t block the main thread. This seems like a nice combination
of the sequential style of synchronous code but with the
responsiveness of non-blocking I/O. Why wouldn’t we want something
like this in ECMAScript?&lt;/p&gt;

&lt;h2 id=&quot;coroutines-are-almost-as-pre-emptive-as-threads&quot;&gt;Coroutines are almost as pre-emptive as threads&lt;/h2&gt;

&lt;p&gt;Part of the beauty of JavaScript’s event loop is that there’s a very
clear synchronization point for reaching a stable state in your
programs: the end of the current turn. You can go ahead and leave
things in a funky intermediate state for as long as you like, and as
long as you stitch everything back up in time for the next spin of the
event loop, no other code can run in the meantime. That means you can
be sure that while your object is lying in pieces on the floor, nobody
else can poke at it before you put it back together again.&lt;/p&gt;

&lt;p&gt;Once you add coroutines, you never know when someone might call
&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;.  Any function you call has the right to pause and resume you
whenever they want, &lt;em&gt;even after any number of spins of the event
loop&lt;/em&gt;. Now any time you find yourself modifying state, you start
worrying that calling a function might interrupt some code you
intended to be transactional. Take something as simple as swapping a
couple fields of an object:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;munge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What happens if &lt;code class=&quot;highlighter-rouge&quot;&gt;munge&lt;/code&gt; does a &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; and only resumes your code
after a few other events fire? Those events could interact with &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;,
and they’d see it in this intermediate state where both &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.foo&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;obj.bar&lt;/code&gt; are the same value, because &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.bar&lt;/code&gt; hasn’t yet been
updated.&lt;/p&gt;

&lt;p&gt;We’ve seen this movie before. This is just like Java’s threads, where
any time you’re working with state, you have to worry about who might
try to touch your data before it reaches a stable point. To be fair,
life is actually far worse in Java, where almost every single basic
operation of the language can be pre-empted. But still, with
coroutines, every function call becomes a potential pre-emption point.&lt;/p&gt;

&lt;h2 id=&quot;host-frames-make-coroutines-unportable&quot;&gt;Host frames make coroutines unportable&lt;/h2&gt;

&lt;p&gt;And then there’s the implementation problem. Unless your JavaScript
engine doesn’t use a stack (and they all do), coroutines would have to
be able to save a stack on the heap and restore it back on the stack
later. But what if JavaScript code calls into code implemented in the
host language (usually C++)? Some engines implement functions like
&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.forEach&lt;/code&gt; in C++. How would they handle code like
this?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wait: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other languages with coroutines take different approaches.  Lua allows
implementations to &lt;a href=&quot;http://www.lua.org/manual/5.1/manual.html#pdf-coroutine.yield&quot;&gt;throw an error&lt;/a&gt;
if user code tries to suspend host activations. This would simply be
unportable, since different engines would implement different standard
libraries in C++.&lt;/p&gt;

&lt;p&gt;The Scheme community tends to demand a lot from their continuations,
so they expect functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;for-each&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; to be
suspended. This could mean either forcing all the standard libraries
to be self-hosted, or using more complicated &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.70.9076&quot;&gt;implementation strategies&lt;/a&gt;
than traditional stacks.&lt;/p&gt;

&lt;p&gt;Simply put: browser vendors are not going to do this. Modern JS
engines are extraordinary feats of engineering, and rearchitecting
their entire stack mechanism is just not realistic. Then when you
consider that these changes could hurt performance of ordinary
function calls, well… end of discussion.&lt;/p&gt;

&lt;h2 id=&quot;shallow-coroutines-to-the-rescue&quot;&gt;Shallow coroutines to the rescue&lt;/h2&gt;

&lt;p&gt;OK, back to the pyramid of doom. It really does kind of suck. I mean,
you could name and lift out your functions, but then you break up the
sequential flow even worse, and you get a combinatorial explosion of
function arguments for all those upvars.&lt;/p&gt;

&lt;p&gt;This is why I’m excited about
&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:generators&quot;&gt;generators&lt;/a&gt;. Generators
are a lot like coroutines, with one important difference: &lt;em&gt;they only
suspend their own function activation&lt;/em&gt;. In ES6, &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; isn’t a
function that anyone can use, it’s a built-in operator that only a
generator function can use. With generators, calling a JS function is
as benign as it ever was. You never have to worry that a function call
might &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; and stop you from doing what you were trying to do.&lt;/p&gt;

&lt;p&gt;But it’s still possible to build an API similar to node-fibers. This
is the idea of &lt;a href=&quot;https://github.com/dherman/taskjs&quot;&gt;task.js&lt;/a&gt;. The
fibers example looks pretty similar in task.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wait... '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok... '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The big difference is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; function doesn’t &lt;em&gt;implicitly&lt;/em&gt;
yield; instead, it returns a
&lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx&quot;&gt;promise&lt;/a&gt;. The
task then &lt;em&gt;explicitly&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;s the promise back to the task.js
scheduler. When the promise is fulfilled, the scheduler wakes the task
back up to continue. Hardly any wordier than node-fibers, but with the
benefit that you can always tell when and what you’re suspending.&lt;/p&gt;

&lt;h2 id=&quot;coroutines-no-generators-yes&quot;&gt;Coroutines no, generators yes&lt;/h2&gt;

&lt;p&gt;Coroutines are not going to happen in JavaScript. They would break one
of the best features of JavaScript: the simplicity of the event loop
execution model. And the demands they would place on current engines
for portability are simply unrealistic. But generator functions are
easy to add to existing engines, they have none of the portability
issues of coroutines, and they give you just enough power to write
non-blocking I/O in a synchronous style without being “threads lite.”&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="JavaScript" />
      
        <category term="coroutines" />
      
        <category term="continuations" />
      
        <category term="generators" />
      

      

      
        <summary type="html">The topic of coroutines (or fibers, or continuations) for JavaScript comes up from time to time, so I figured I’d write down my thoughts on the matter. I admit to having a soft spot for crazy control-flow features like continuations, but they’re unlikely ever to make it into ECMAScript. With good reason.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Obligatory fawning over Octopress</title>
      
      
      <link href="http://localhost:4000/blog/2011/12/05/obligatory-fawning-over-octopress/" rel="alternate" type="text/html" title="Obligatory fawning over Octopress" />
      
      <published>2011-12-05T13:14:00-08:00</published>
      <updated>2011-12-05T13:14:00-08:00</updated>
      <id>http://localhost:4000/blog/2011/12/05/obligatory-fawning-over-octopress</id>
      <content type="html" xml:base="http://localhost:4000/blog/2011/12/05/obligatory-fawning-over-octopress/">&lt;p&gt;I’m joining the throngs of programmer-bloggers using &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt; for my new blog.
There’s so much to commend about it, but it really comes down to one thing:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Programmers should be able to write their blogs in text editors.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also, from now on, everything I ever do in my life should be in GitHub.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Octopress" />
      

      

      
        <summary type="html">I’m joining the throngs of programmer-bloggers using Octopress for my new blog. There’s so much to commend about it, but it really comes down to one thing: Programmers should be able to write their blogs in text editors. Also, from now on, everything I ever do in my life should be in GitHub.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Hello, world</title>
      
      
      <link href="http://localhost:4000/blog/2011/12/05/hello/" rel="alternate" type="text/html" title="Hello, world" />
      
      <published>2011-12-05T08:00:00-08:00</published>
      <updated>2011-12-05T08:00:00-08:00</updated>
      <id>http://localhost:4000/blog/2011/12/05/hello</id>
      <content type="html" xml:base="http://localhost:4000/blog/2011/12/05/hello/">&lt;p&gt;This is my blog’s new home.&lt;/p&gt;

&lt;p&gt;My old blogs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://calculist.blogspot.com&quot;&gt;http://calculist.blogspot.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.mozilla.com/dherman&quot;&gt;http://blog.mozilla.com/dherman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;should stick around indefinitely as archives but they’ll be inactive from now on.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>David Herman</name>
          
          
        </author>
      

      
        <category term="Octopress" />
      

      

      
        <summary type="html">This is my blog’s new home. My old blogs: http://calculist.blogspot.com http://blog.mozilla.com/dherman should stick around indefinitely as archives but they’ll be inactive from now on.</summary>
      

      
      
    </entry>
  
  
</feed>
